/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package heap.stark.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-07-08")
public class Bean implements org.apache.thrift.TBase<Bean, Bean._Fields>, java.io.Serializable, Cloneable, Comparable<Bean> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Bean");

  private static final org.apache.thrift.protocol.TField BEAN_FIELD_DESC = new org.apache.thrift.protocol.TField("bean", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField ID32_FIELD_DESC = new org.apache.thrift.protocol.TField("id32", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField ID8_FIELD_DESC = new org.apache.thrift.protocol.TField("id8", org.apache.thrift.protocol.TType.BYTE, (short)3);
  private static final org.apache.thrift.protocol.TField B_FIELD_DESC = new org.apache.thrift.protocol.TField("b", org.apache.thrift.protocol.TType.BOOL, (short)4);
  private static final org.apache.thrift.protocol.TField D_FIELD_DESC = new org.apache.thrift.protocol.TField("d", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField L_FIELD_DESC = new org.apache.thrift.protocol.TField("l", org.apache.thrift.protocol.TType.LIST, (short)7);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new BeanStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new BeanTupleSchemeFactory();

  public SimpleBean bean; // optional
  public int id32; // optional
  public byte id8; // optional
  public boolean b; // optional
  public double d; // optional
  public java.util.List<SimpleBean> l; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BEAN((short)1, "bean"),
    ID32((short)2, "id32"),
    ID8((short)3, "id8"),
    B((short)4, "b"),
    D((short)6, "d"),
    L((short)7, "l");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BEAN
          return BEAN;
        case 2: // ID32
          return ID32;
        case 3: // ID8
          return ID8;
        case 4: // B
          return B;
        case 6: // D
          return D;
        case 7: // L
          return L;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID32_ISSET_ID = 0;
  private static final int __ID8_ISSET_ID = 1;
  private static final int __B_ISSET_ID = 2;
  private static final int __D_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.BEAN,_Fields.ID32,_Fields.ID8,_Fields.B,_Fields.D,_Fields.L};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BEAN, new org.apache.thrift.meta_data.FieldMetaData("bean", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SimpleBean.class)));
    tmpMap.put(_Fields.ID32, new org.apache.thrift.meta_data.FieldMetaData("id32", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ID8, new org.apache.thrift.meta_data.FieldMetaData("id8", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.B, new org.apache.thrift.meta_data.FieldMetaData("b", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.D, new org.apache.thrift.meta_data.FieldMetaData("d", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.L, new org.apache.thrift.meta_data.FieldMetaData("l", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SimpleBean.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Bean.class, metaDataMap);
  }

  public Bean() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Bean(Bean other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetBean()) {
      this.bean = new SimpleBean(other.bean);
    }
    this.id32 = other.id32;
    this.id8 = other.id8;
    this.b = other.b;
    this.d = other.d;
    if (other.isSetL()) {
      java.util.List<SimpleBean> __this__l = new java.util.ArrayList<SimpleBean>(other.l.size());
      for (SimpleBean other_element : other.l) {
        __this__l.add(new SimpleBean(other_element));
      }
      this.l = __this__l;
    }
  }

  public Bean deepCopy() {
    return new Bean(this);
  }

  @Override
  public void clear() {
    this.bean = null;
    setId32IsSet(false);
    this.id32 = 0;
    setId8IsSet(false);
    this.id8 = 0;
    setBIsSet(false);
    this.b = false;
    setDIsSet(false);
    this.d = 0.0;
    this.l = null;
  }

  public SimpleBean getBean() {
    return this.bean;
  }

  public Bean setBean(SimpleBean bean) {
    this.bean = bean;
    return this;
  }

  public void unsetBean() {
    this.bean = null;
  }

  /** Returns true if field bean is set (has been assigned a value) and false otherwise */
  public boolean isSetBean() {
    return this.bean != null;
  }

  public void setBeanIsSet(boolean value) {
    if (!value) {
      this.bean = null;
    }
  }

  public int getId32() {
    return this.id32;
  }

  public Bean setId32(int id32) {
    this.id32 = id32;
    setId32IsSet(true);
    return this;
  }

  public void unsetId32() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID32_ISSET_ID);
  }

  /** Returns true if field id32 is set (has been assigned a value) and false otherwise */
  public boolean isSetId32() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID32_ISSET_ID);
  }

  public void setId32IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID32_ISSET_ID, value);
  }

  public byte getId8() {
    return this.id8;
  }

  public Bean setId8(byte id8) {
    this.id8 = id8;
    setId8IsSet(true);
    return this;
  }

  public void unsetId8() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID8_ISSET_ID);
  }

  /** Returns true if field id8 is set (has been assigned a value) and false otherwise */
  public boolean isSetId8() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID8_ISSET_ID);
  }

  public void setId8IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID8_ISSET_ID, value);
  }

  public boolean isB() {
    return this.b;
  }

  public Bean setB(boolean b) {
    this.b = b;
    setBIsSet(true);
    return this;
  }

  public void unsetB() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __B_ISSET_ID);
  }

  /** Returns true if field b is set (has been assigned a value) and false otherwise */
  public boolean isSetB() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __B_ISSET_ID);
  }

  public void setBIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __B_ISSET_ID, value);
  }

  public double getD() {
    return this.d;
  }

  public Bean setD(double d) {
    this.d = d;
    setDIsSet(true);
    return this;
  }

  public void unsetD() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __D_ISSET_ID);
  }

  /** Returns true if field d is set (has been assigned a value) and false otherwise */
  public boolean isSetD() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __D_ISSET_ID);
  }

  public void setDIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __D_ISSET_ID, value);
  }

  public int getLSize() {
    return (this.l == null) ? 0 : this.l.size();
  }

  public java.util.Iterator<SimpleBean> getLIterator() {
    return (this.l == null) ? null : this.l.iterator();
  }

  public void addToL(SimpleBean elem) {
    if (this.l == null) {
      this.l = new java.util.ArrayList<SimpleBean>();
    }
    this.l.add(elem);
  }

  public java.util.List<SimpleBean> getL() {
    return this.l;
  }

  public Bean setL(java.util.List<SimpleBean> l) {
    this.l = l;
    return this;
  }

  public void unsetL() {
    this.l = null;
  }

  /** Returns true if field l is set (has been assigned a value) and false otherwise */
  public boolean isSetL() {
    return this.l != null;
  }

  public void setLIsSet(boolean value) {
    if (!value) {
      this.l = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case BEAN:
      if (value == null) {
        unsetBean();
      } else {
        setBean((SimpleBean)value);
      }
      break;

    case ID32:
      if (value == null) {
        unsetId32();
      } else {
        setId32((java.lang.Integer)value);
      }
      break;

    case ID8:
      if (value == null) {
        unsetId8();
      } else {
        setId8((java.lang.Byte)value);
      }
      break;

    case B:
      if (value == null) {
        unsetB();
      } else {
        setB((java.lang.Boolean)value);
      }
      break;

    case D:
      if (value == null) {
        unsetD();
      } else {
        setD((java.lang.Double)value);
      }
      break;

    case L:
      if (value == null) {
        unsetL();
      } else {
        setL((java.util.List<SimpleBean>)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case BEAN:
      return getBean();

    case ID32:
      return getId32();

    case ID8:
      return getId8();

    case B:
      return isB();

    case D:
      return getD();

    case L:
      return getL();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case BEAN:
      return isSetBean();
    case ID32:
      return isSetId32();
    case ID8:
      return isSetId8();
    case B:
      return isSetB();
    case D:
      return isSetD();
    case L:
      return isSetL();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof Bean)
      return this.equals((Bean)that);
    return false;
  }

  public boolean equals(Bean that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_bean = true && this.isSetBean();
    boolean that_present_bean = true && that.isSetBean();
    if (this_present_bean || that_present_bean) {
      if (!(this_present_bean && that_present_bean))
        return false;
      if (!this.bean.equals(that.bean))
        return false;
    }

    boolean this_present_id32 = true && this.isSetId32();
    boolean that_present_id32 = true && that.isSetId32();
    if (this_present_id32 || that_present_id32) {
      if (!(this_present_id32 && that_present_id32))
        return false;
      if (this.id32 != that.id32)
        return false;
    }

    boolean this_present_id8 = true && this.isSetId8();
    boolean that_present_id8 = true && that.isSetId8();
    if (this_present_id8 || that_present_id8) {
      if (!(this_present_id8 && that_present_id8))
        return false;
      if (this.id8 != that.id8)
        return false;
    }

    boolean this_present_b = true && this.isSetB();
    boolean that_present_b = true && that.isSetB();
    if (this_present_b || that_present_b) {
      if (!(this_present_b && that_present_b))
        return false;
      if (this.b != that.b)
        return false;
    }

    boolean this_present_d = true && this.isSetD();
    boolean that_present_d = true && that.isSetD();
    if (this_present_d || that_present_d) {
      if (!(this_present_d && that_present_d))
        return false;
      if (this.d != that.d)
        return false;
    }

    boolean this_present_l = true && this.isSetL();
    boolean that_present_l = true && that.isSetL();
    if (this_present_l || that_present_l) {
      if (!(this_present_l && that_present_l))
        return false;
      if (!this.l.equals(that.l))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetBean()) ? 131071 : 524287);
    if (isSetBean())
      hashCode = hashCode * 8191 + bean.hashCode();

    hashCode = hashCode * 8191 + ((isSetId32()) ? 131071 : 524287);
    if (isSetId32())
      hashCode = hashCode * 8191 + id32;

    hashCode = hashCode * 8191 + ((isSetId8()) ? 131071 : 524287);
    if (isSetId8())
      hashCode = hashCode * 8191 + (int) (id8);

    hashCode = hashCode * 8191 + ((isSetB()) ? 131071 : 524287);
    if (isSetB())
      hashCode = hashCode * 8191 + ((b) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetD()) ? 131071 : 524287);
    if (isSetD())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(d);

    hashCode = hashCode * 8191 + ((isSetL()) ? 131071 : 524287);
    if (isSetL())
      hashCode = hashCode * 8191 + l.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(Bean other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetBean()).compareTo(other.isSetBean());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBean()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bean, other.bean);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetId32()).compareTo(other.isSetId32());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId32()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id32, other.id32);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetId8()).compareTo(other.isSetId8());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId8()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id8, other.id8);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetB()).compareTo(other.isSetB());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetB()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.b, other.b);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetD()).compareTo(other.isSetD());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetD()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.d, other.d);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetL()).compareTo(other.isSetL());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetL()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.l, other.l);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("Bean(");
    boolean first = true;

    if (isSetBean()) {
      sb.append("bean:");
      if (this.bean == null) {
        sb.append("null");
      } else {
        sb.append(this.bean);
      }
      first = false;
    }
    if (isSetId32()) {
      if (!first) sb.append(", ");
      sb.append("id32:");
      sb.append(this.id32);
      first = false;
    }
    if (isSetId8()) {
      if (!first) sb.append(", ");
      sb.append("id8:");
      sb.append(this.id8);
      first = false;
    }
    if (isSetB()) {
      if (!first) sb.append(", ");
      sb.append("b:");
      sb.append(this.b);
      first = false;
    }
    if (isSetD()) {
      if (!first) sb.append(", ");
      sb.append("d:");
      sb.append(this.d);
      first = false;
    }
    if (isSetL()) {
      if (!first) sb.append(", ");
      sb.append("l:");
      if (this.l == null) {
        sb.append("null");
      } else {
        sb.append(this.l);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (bean != null) {
      bean.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BeanStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public BeanStandardScheme getScheme() {
      return new BeanStandardScheme();
    }
  }

  private static class BeanStandardScheme extends org.apache.thrift.scheme.StandardScheme<Bean> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Bean struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BEAN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.bean = new SimpleBean();
              struct.bean.read(iprot);
              struct.setBeanIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ID32
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id32 = iprot.readI32();
              struct.setId32IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ID8
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.id8 = iprot.readByte();
              struct.setId8IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // B
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.b = iprot.readBool();
              struct.setBIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // D
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.d = iprot.readDouble();
              struct.setDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // L
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.l = new java.util.ArrayList<SimpleBean>(_list0.size);
                SimpleBean _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new SimpleBean();
                  _elem1.read(iprot);
                  struct.l.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setLIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Bean struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.bean != null) {
        if (struct.isSetBean()) {
          oprot.writeFieldBegin(BEAN_FIELD_DESC);
          struct.bean.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetId32()) {
        oprot.writeFieldBegin(ID32_FIELD_DESC);
        oprot.writeI32(struct.id32);
        oprot.writeFieldEnd();
      }
      if (struct.isSetId8()) {
        oprot.writeFieldBegin(ID8_FIELD_DESC);
        oprot.writeByte(struct.id8);
        oprot.writeFieldEnd();
      }
      if (struct.isSetB()) {
        oprot.writeFieldBegin(B_FIELD_DESC);
        oprot.writeBool(struct.b);
        oprot.writeFieldEnd();
      }
      if (struct.isSetD()) {
        oprot.writeFieldBegin(D_FIELD_DESC);
        oprot.writeDouble(struct.d);
        oprot.writeFieldEnd();
      }
      if (struct.l != null) {
        if (struct.isSetL()) {
          oprot.writeFieldBegin(L_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.l.size()));
            for (SimpleBean _iter3 : struct.l)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BeanTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public BeanTupleScheme getScheme() {
      return new BeanTupleScheme();
    }
  }

  private static class BeanTupleScheme extends org.apache.thrift.scheme.TupleScheme<Bean> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Bean struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetBean()) {
        optionals.set(0);
      }
      if (struct.isSetId32()) {
        optionals.set(1);
      }
      if (struct.isSetId8()) {
        optionals.set(2);
      }
      if (struct.isSetB()) {
        optionals.set(3);
      }
      if (struct.isSetD()) {
        optionals.set(4);
      }
      if (struct.isSetL()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetBean()) {
        struct.bean.write(oprot);
      }
      if (struct.isSetId32()) {
        oprot.writeI32(struct.id32);
      }
      if (struct.isSetId8()) {
        oprot.writeByte(struct.id8);
      }
      if (struct.isSetB()) {
        oprot.writeBool(struct.b);
      }
      if (struct.isSetD()) {
        oprot.writeDouble(struct.d);
      }
      if (struct.isSetL()) {
        {
          oprot.writeI32(struct.l.size());
          for (SimpleBean _iter4 : struct.l)
          {
            _iter4.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Bean struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.bean = new SimpleBean();
        struct.bean.read(iprot);
        struct.setBeanIsSet(true);
      }
      if (incoming.get(1)) {
        struct.id32 = iprot.readI32();
        struct.setId32IsSet(true);
      }
      if (incoming.get(2)) {
        struct.id8 = iprot.readByte();
        struct.setId8IsSet(true);
      }
      if (incoming.get(3)) {
        struct.b = iprot.readBool();
        struct.setBIsSet(true);
      }
      if (incoming.get(4)) {
        struct.d = iprot.readDouble();
        struct.setDIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.l = new java.util.ArrayList<SimpleBean>(_list5.size);
          SimpleBean _elem6;
          for (int _i7 = 0; _i7 < _list5.size; ++_i7)
          {
            _elem6 = new SimpleBean();
            _elem6.read(iprot);
            struct.l.add(_elem6);
          }
        }
        struct.setLIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

